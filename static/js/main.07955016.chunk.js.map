{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","components/Toolbar/Toolbar.js","components/Content/Editor/Editor.js","components/Content/Previewer/Previewer.js","constants.js","components/Content/Content.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","backgroundColor","color","padding","textAlign","height","Header","react_default","a","createElement","style","footerStyle","Footer","className","Toolbar","props","class","title","concat","fullScreen","onClick","toggleFullScreen","Editor","editorFull","components_Toolbar_Toolbar","toggleEditorFull","name","id","value","markdown","onChange","handleChange","marked","setOptions","breaks","renderer","Renderer","link","href","text","Previewer","previewerFull","togglePreviewerFull","dangerouslySetInnerHTML","__html","PLACEHOLDER","contentStyle","minHeight","Content","state","e","target","_this","setState","this","Content_Editor_Editor","Content_Previewer_Previewer","React","Component","App","components_Header_Header","components_Content_Content","components_Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07955016.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst headerStyle = {\r\n    backgroundColor: 'var(--main-secondary-color)',\r\n    color: 'var(--main-title-text-color)',\r\n    padding: '10px 20px',\r\n    textAlign: 'center',\r\n    height:'10vh',\r\n}\r\n\r\nconst Header = () => {\r\n  return (\r\n    <nav style={headerStyle}>\r\n        <h1>Markdown Previewer</h1>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst footerStyle = {\r\n    backgroundColor: 'var(--main-secondary-color)',\r\n    color: 'var(--main-title-text-color)',\r\n    padding: '10px 20px',\r\n    textAlign: 'center',\r\n    height:'10vh'\r\n}\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div style={footerStyle}>\r\n      <h4>Created by <i className=\"far fa-copyright\"></i> Pablo Cabrera Darias</h4>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport './Toolbar.css'\r\n\r\nconst Toolbar = (props) => {\r\n  return (\r\n    <div className=\"toolbar\">\r\n        <i class=\"fab fa-free-code-camp mr-2\"></i>\r\n            {props.title}\r\n        <i className={`${!props.fullScreen? 'fas fa-expand-arrows-alt':'fas fa-compress-arrows-alt'} fullScreen__icon`} \r\n            onClick={props.toggleFullScreen}>\r\n        </i>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Toolbar","import React from 'react'\r\nimport './Editor.css'\r\nimport Toolbar from '../../Toolbar/Toolbar';\r\n\r\nconst Editor = (props) => {\r\n  return (\r\n    <div className={`editor__container ${props.editorFull? 'maximized':''}`} >\r\n        <Toolbar\r\n          title=\"Editor\"\r\n          toggleFullScreen={props.toggleEditorFull}\r\n          fullScreen={props.editorFull}\r\n        />\r\n        <textarea\r\n          name=\"editorText\"\r\n          id=\"editor\" value={props.markdown}\r\n          className=\"editor__textarea\"\r\n          onChange={props.handleChange}\r\n        >\r\n        </textarea>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Editor\r\n","import React from 'react'\r\nimport './Previewer.css'\r\nimport marked from 'marked'\r\nimport Toolbar from '../../Toolbar/Toolbar';\r\n\r\nmarked.setOptions({\r\n    breaks: true,\r\n  });\r\n  \r\nconst renderer = new marked.Renderer();\r\nrenderer.link = function (href, title, text) {\r\n  return `<a target=\"_blank\" href=\"${href}\" tilte=${title}>${text}</a>`;\r\n}\r\n\r\nconst Previewer = (props) => {\r\n  return (\r\n    <div className={`prev__container ${props.previewerFull? 'maximized':''}`} >\r\n        <Toolbar \r\n          title=\"Previewer\" \r\n          toggleFullScreen={props.togglePreviewerFull}\r\n          fullScreen={props.previewerFull}\r\n        />\r\n        <div id=\"preview\" \r\n            dangerouslySetInnerHTML={{__html: marked(props.markdown, { renderer: renderer })}} \r\n            className=\"prev__screen\">\r\n        </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Previewer\r\n","export const PLACEHOLDER =\r\n`# Welcome to my React Markdown Previewer!\r\n\r\n## This is a sub-heading...\r\n### And here's some other cool stuff:\r\n\r\nHeres some code, \\`<div></div>\\`, between 2 backticks.\r\n\r\n\\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\nif (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n}\r\n}\r\n\\`\\`\\`\r\n\r\nYou can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\n\r\nThere's also [links](https://www.freecodecamp.com), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | ------------- \r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n- Some are bulleted.\r\n    - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbererd lists too.\r\n1. Use just 1s if you want! \r\n1. But the list goes on...\r\n- Even if you use dashes or asterisks.\r\n* And last but not least, let's not forget embedded images:\r\n\r\n![React Logo w/ Text](https://goo.gl/Umyytc)\r\n`","import React from 'react'\r\n\r\nimport Editor from './Editor/Editor'\r\nimport Previewer from './Previewer/Previewer';\r\n\r\nimport { PLACEHOLDER } from '../../constants'\r\n\r\nconst contentStyle = {\r\n    backgroundColor: 'var(--main-bg-color)',\r\n    color: 'var(--main-text-color)',\r\n    minHeight:'80vh'\r\n    \r\n}\r\n\r\nclass Content extends React.Component {\r\n    state = {\r\n        markdown: PLACEHOLDER,\r\n        editorFull: false,\r\n        previewerFull: false\r\n        \r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const markdown = e.target.value;\r\n        this.setState({markdown})\r\n        \r\n    }\r\n\r\n    toggleEditorFull = () => {\r\n        this.setState({editorFull: !this.state.editorFull})\r\n    }\r\n    \r\n    togglePreviewerFull = () => {\r\n        this.setState({previewerFull: !this.state.previewerFull})\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"container-fluid d-flex flex-column align-items-center\" style={contentStyle}>\r\n                {!this.state.previewerFull &&\r\n                <Editor\r\n                    handleChange={this.handleChange}\r\n                    markdown={this.state.markdown}\r\n                    toggleEditorFull={this.toggleEditorFull}\r\n                    editorFull={this.state.editorFull}\r\n                />\r\n                }\r\n                \r\n                {!this.state.editorFull &&\r\n                <Previewer\r\n                    markdown={this.state.markdown}\r\n                    togglePreviewerFull={this.togglePreviewerFull}\r\n                    previewerFull={this.state.previewerFull}\r\n                />\r\n                }\r\n            </div>\r\n        \r\n        )\r\n    }\r\n}\r\n\r\nexport default Content\r\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Header from './components/Header/Header'\nimport Footer from './components/Footer/Footer'\nimport Content from './components/Content/Content'\n\nclass App extends Component {\n  render() {\n    return (\n      <div id=\"drum-machine\" className=\"App\">\n        <Header />\n        <Content />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}